name: 🪅 SonarCloud Scan

on:
  push:
    branches:
      - development
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: 🧪 Build and analyze
    runs-on: [self-hosted, linux]
    timeout-minutes: 10

    steps:
      - name: 🏗 Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x.x'

      - name: 📍 Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 📦 Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: 🔎 Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: 🧪 Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin /k:"dotnet" /o:"dotnet" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build Saas.Data
          dotnet build Saas.Api
          dotnet build Saas.Entities
          dotnet build Saas.Repository
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
